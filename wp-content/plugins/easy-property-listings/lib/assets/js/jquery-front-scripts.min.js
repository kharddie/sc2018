function eplGetCookie(e) {
    return EPL_Front_Js.get_cookie(e)
}
jQuery(document).ready(function(c) {
    Number.prototype.formatMoney = function(e, a, t) {
        var l = this,
            r = (e = isNaN(e = Math.abs(e)) ? 2 : e, a = null == a ? "." : a, t = null == t ? "," : t, l < 0 ? "-" : ""),
            s = parseInt(l = Math.abs(+l || 0).toFixed(e)) + "",
            i = 3 < (i = s.length) ? i % 3 : 0;
        return r + (i ? s.substr(0, i) + t : "") + s.substr(i).replace(/(\d{3})(?=\d)/g, "$1" + t) + (e ? a + Math.abs(l - s).toFixed(e).slice(2) : "")
    }, EPL_Front_Js = {
        init: function() {
            this.sort_listings(), this.author_tabs(), this.default_map(), this.switch_view(), this.set_default_view(), this.listing_search_tabs(), this.field_sliders(), this.epl_search(), this.contact_form_submit()
        },
        property_search: function() {
            if (1 == c("#property_id").length) {
                var a = null;
                c("#property_id").keyup(function() {
                    if ("" == c("#property_id").val()) return c(".epl-property-suggestion").fadeOut(), !1;
                    null != a && clearTimeout(a);
                    var e = c(this).val();
                    data = {
                        action: "epl_search_listing",
                        s: e
                    }, a = setTimeout(function() {
                        a = null, c.ajax({
                            type: "POST",
                            data: data,
                            url: ajaxurl,
                            success: function(e) {
                                1 == c(".epl-property-suggestion").length ? c(".epl-property-suggestion").replaceWith(e) : c("#property_id").after(e), c(".epl-property-suggestion").fadeIn()
                            }
                        })
                    }, 300)
                }), c(document.body).on("click", ".epl-property-suggestion li", function(e) {
                    c("#property_id").val(c(this).data("id")), c(".epl-property-suggestion").fadeOut().remove()
                })
            }
        },
        sort_listings: function() {
            jQuery("#epl-sort-listings").on("change", function() {
                var e = jQuery(this).val(),
                    a = window.location.href.split("?")[0],
                    t = window.location.href.split("?")[1],
                    l = a.search("page");
                if (-1 < l) a = a.substring(0, l);
                if (null != jQuery.getUrlVar("sortby")) var r = a + (t = (t = "?" + t).replace(/([?&]sortby)=([^#&]*)/g, "$1=" + e));
                else if (null == t) r = a + "?sortby=" + e;
                else r = a + "?" + t + "&sortby=" + e;
                window.location.replace(r)
            })
        },
        get_cookie: function(e) {
            var a, t, l, r = document.cookie.split(";");
            for (a = 0; a < r.length; a++)
                if (t = r[a].substr(0, r[a].indexOf("=")), l = r[a].substr(r[a].indexOf("=") + 1), (t = t.replace(/^\s+|\s+$/g, "")) == e) return unescape(l)
        },
        author_tabs: function() {
            jQuery("ul.epl-author-tabs li").click(function() {
                var e = jQuery(this).closest(".epl-author-box-container").attr("id"),
                    a = jQuery(this).attr("data-tab");
                jQuery("#" + e + " ul.epl-author-tabs li").removeClass("epl-author-current"), jQuery("#" + e + " .epl-author-tab-content").removeClass("epl-author-current"), jQuery(this).addClass("epl-author-current"), jQuery("#" + e + " #" + a).addClass("epl-author-current")
            })
        },
        default_map: function() {
            if (c("#epl-default-map").length && "object" == typeof google && "object" == typeof google.maps) {
                var a = c("#epl-default-map").data("cord"),
                    e = c("#epl-default-map").data("address"),
                    l = c("#epl-default-map").data("zoom"),
                    r = c("#epl-default-map").data("id"),
                    s = c("#epl-default-map").data("suburb_mode");
                if ("" != a) {
                    a = a.split(","),
                        function() {
                            new google.maps.Geocoder, eplmapcord = new google.maps.LatLng(a[0], a[1]);
                            var e = {
                                center: eplmapcord,
                                zoom: l,
                                styles: [{
                                    "featureType": "water",
                                    "elementType": "geometry",
                                    "stylers": [{
                                        "color": "#e9e9e9"
                                    }, {
                                        "lightness": 17
                                    }]
                                }, {
                                    "featureType": "landscape",
                                    "elementType": "geometry",
                                    "stylers": [{
                                        "color": "#f5f5f5"
                                    }, {
                                        "lightness": 20
                                    }]
                                }, {
                                    "featureType": "road.highway",
                                    "elementType": "geometry.fill",
                                    "stylers": [{
                                        "color": "#ffffff"
                                    }, {
                                        "lightness": 17
                                    }]
                                }, {
                                    "featureType": "road.highway",
                                    "elementType": "geometry.stroke",
                                    "stylers": [{
                                        "color": "#ffffff"
                                    }, {
                                        "lightness": 29
                                    }, {
                                        "weight": 0.2
                                    }]
                                }, {
                                    "featureType": "road.arterial",
                                    "elementType": "geometry",
                                    "stylers": [{
                                        "color": "#ffffff"
                                    }, {
                                        "lightness": 18
                                    }]
                                }, {
                                    "featureType": "road.local",
                                    "elementType": "geometry",
                                    "stylers": [{
                                        "color": "#ffffff"
                                    }, {
                                        "lightness": 16
                                    }]
                                }, {
                                    "featureType": "poi",
                                    "elementType": "geometry",
                                    "stylers": [{
                                        "color": "#f5f5f5"
                                    }, {
                                        "lightness": 21
                                    }]
                                }, {
                                    "featureType": "poi.park",
                                    "elementType": "geometry",
                                    "stylers": [{
                                        "color": "#dedede"
                                    }, {
                                        "lightness": 21
                                    }]
                                }, {
                                    "elementType": "labels.text.stroke",
                                    "stylers": [{
                                        "visibility": "on"
                                    }, {
                                        "color": "#ffffff"
                                    }, {
                                        "lightness": 16
                                    }]
                                }, {
                                    "elementType": "labels.text.fill",
                                    "stylers": [{
                                        "saturation": 36
                                    }, {
                                        "color": "#333333"
                                    }, {
                                        "lightness": 40
                                    }]
                                }, {
                                    "elementType": "labels.icon",
                                    "stylers": [{
                                        "visibility": "off"
                                    }]
                                }, {
                                    "featureType": "transit",
                                    "elementType": "geometry",
                                    "stylers": [{
                                        "color": "#f2f2f2"
                                    }, {
                                        "lightness": 19
                                    }]
                                }, {
                                    "featureType": "administrative",
                                    "elementType": "geometry.fill",
                                    "stylers": [{
                                        "color": "#fefefe"
                                    }, {
                                        "lightness": 20
                                    }]
                                }, {
                                    "featureType": "administrative",
                                    "elementType": "geometry.stroke",
                                    "stylers": [{
                                        "color": "#fefefe"
                                    }, {
                                        "lightness": 17
                                    }, {
                                        "weight": 1.2
                                    }]
                                }]
                            };
                            window.epldefaultmap = new google.maps.Map(document.getElementById("epl-default-map"), e), epl_marker_icon = "black-custom-marker.svg", window.epldefaultmarker = new google.maps.Marker({
                                map: epldefaultmap,
                                position: eplmapcord,
                                icon: epl_frontend_vars.image_base + epl_marker_icon
                            })
                        }()
                } else if ("" != e) {
                    (new google.maps.Geocoder).geocode({
                        address: e
                    }, function(e, a) {
                        if (a == google.maps.GeocoderStatus.OK) {
                            var t = {
                                center: e[0].geometry.location,
                                zoom: l
                            };
                            epldefaultmap = new google.maps.Map(document.getElementById("epl-default-map"), t), epl_marker_icon = "black-custom-marker.svg", 1 != s ? c.ajax({
                                type: "POST",
                                url: epl_frontend_vars.ajaxurl,
                                data: {
                                    action: "epl_update_listing_coordinates",
                                    coordinates: e[0].geometry.location.toString(),
                                    listid: r
                                }
                            }).done(function(e) {}) : epl_marker_icon = "suburb.png", window.epldefaultmarker = new google.maps.Marker({
                                map: epldefaultmap,
                                position: e[0].geometry.location,
                                icon: epl_frontend_vars.image_base + epl_marker_icon
                            })
                        }
                    })
                }
            }
        },
        set_default_view: function() {
            if (void 0 !== eplGetCookie("preferredView")) {
                var e = this.get_cookie("preferredView");
                jQuery('.epl-switch-view ul li[data-view="' + e + '"]').trigger("click")
            } else "grid" == epl_frontend_vars.epl_default_view_type && jQuery('.epl-switch-view ul li[data-view="grid"]').trigger("click")
        },
        switch_view: function() {
            jQuery(".epl-switch-view ul li").click(function() {
                var e = jQuery(this).data("view");
                c.ajax({
                    type: "POST",
                    url: epl_frontend_vars.ajaxurl,
                    data: {
                        action: "epl_update_default_view",
                        view: e
                    }
                }).done(function(e) {}), "undefined" == typeof listingsMasonEnabled && (jQuery(".epl-switch-view ul li").removeClass("epl-current-view"), jQuery(this).addClass("epl-current-view"), "grid" == e ? (jQuery(".epl-property-blog").addClass("epl-listing-grid-view"), jQuery(".epl-listing-grid-view.epl-property-blog").each(function(e) {
                    1
                })) : jQuery(".epl-property-blog").removeClass("epl-listing-grid-view"))
            })
        },
        listing_search_tabs: function() {
            jQuery("ul.property_search-tabs li").click(function() {
                var e = jQuery(this).attr("data-tab");
                jQuery("ul.property_search-tabs li").removeClass("epl-sb-current"), jQuery(".epl-search-form").removeClass("epl-sb-current"), jQuery(this).addClass("epl-sb-current"), jQuery("#" + e).addClass("epl-sb-current")
            })
        },
        get_url_vars: function() {
            for (var e, a = [], t = window.location.href.slice(window.location.href.indexOf("?") + 1).split("&"), l = 0; l < t.length; l++) e = t[l].split("="), a.push(e[0]), a[e[0]] = e[1];
            return a
        },
        get_url_var: function(e) {
            return this.get_url_vars()[e]
        },
        field_sliders: function() {
            var e = c(".epl-search-form"),
                a = epl_frontend_vars.field_sliders;
            e.each(function(e) {
                var u = c(this);
                c.each(a, function(l, r) {
                    if (elExists = !0, c.each(r.els, function(e, a) {
                            c("." + a).length ? c("." + a).closest(".epl-search-row").hide() : elExists = !1
                        }), elExists)
                        if (r.els.length < 2) {
                            var a = isNaN(Number(c("." + r.els[0]).data("min"))) ? r.min : Number(c("." + r.els[0]).data("min")),
                                s = isNaN(Number(c("." + r.els[0]).data("max"))) ? r.max : Number(c("." + r.els[0]).data("max")),
                                i = a,
                                e = c.getUrlVar(r.els[0]);
                            void 0 !== e && (i = parseInt(e)), c("." + r.els[0]).closest(".epl-search-row").after('<div class="epl-lf-range-slider epl-search-row epl-search-row-select fm-block epl-search-row-full "><label class="epl-search-label fm-label label_' + l + '" for="' + l + '">' + r.label + '</label><div class="field"><div class="' + l + '"></div></div></div>'), c("." + l).each(function(e) {
                                var t = c(this).closest(".epl-lf-range-slider");
                                c(this).slider({
                                    min: a,
                                    max: s,
                                    range: "min",
                                    animate: !0,
                                    value: i,
                                    slide: function(e, a) {
                                        c("." + r.els[0]).append(new Option(a.value.formatMoney(0), a.value)), c("." + r.els[0]).val(a.value).change(), t.find(".label_" + l).html(r.label + '<span class="epl-lf-label-txt"> ' + r.prefix + a.value.formatMoney(0) + r.suffix + "</span>")
                                    },
                                    stop: function(e, a) {},
                                    create: function(e, a) {
                                        t.find(".label_" + l).html(r.label + '<span class="epl-lf-label-txt"> ' + r.prefix + i.formatMoney(0) + r.suffix + "</span>")
                                    }
                                })
                            })
                        } else {
                            var n = u.find("." + r.els[0]),
                                o = u.find("." + r.els[1]),
                                t = (i = [n.data("min"), n.data("max")], a = isNaN(Number(n.data("min"))) ? r.min : Number(n.data("min")), s = isNaN(Number(o.data("max"))) ? r.max : Number(o.data("max")), c.getUrlVar(r.els[0])),
                                p = c.getUrlVar(r.els[1]);
                            void 0 !== t && "" != t && (t = parseInt(t)), void 0 !== p && "" != p && (p = parseInt(p)), (void 0 !== t && "" != t || void 0 !== p && "" != p) && (i = [t, p]), n.closest(".epl-search-row").after('<div class="epl-lf-range-slider epl-search-row epl-search-row-select fm-block epl-search-row-full "><label class="epl-search-label fm-label label_' + l + '" for="' + l + '">' + r.label + '</label><div class="field"><div class="' + l + '"></div></div></div>'), u.find("." + l).each(function(e) {
                                var t = c(this).closest(".epl-lf-range-slider");
                                c(this).slider({
                                    range: !0,
                                    step: 0 < u.find("." + r.els[1]).has("option").length ? Number(u.find("." + r.els[1] + " option:eq(2)").val()) - Number(u.find("." + r.els[1] + " option:eq(1)").val()) : r.step,
                                    min: a,
                                    max: s,
                                    animate: !0,
                                    values: i,
                                    slide: function(e, a) {
                                        n.append(new Option(a.values[0].formatMoney(0), a.values[0])), n.append(new Option(a.values[1].formatMoney(0), a.values[1])), o.append(new Option(a.values[0].formatMoney(0), a.values[0])), o.append(new Option(a.values[1].formatMoney(0), a.values[1])), n.val(a.values[0]).change(), o.val(a.values[1]).change(), t.find(".label_" + l).html(r.label + '<span class="epl-lf-label-txt"> ' + r.prefix + a.values[0].formatMoney(0) + r.suffix + r.separator + r.prefix + a.values[1].formatMoney(0) + r.suffix + "</span>")
                                    },
                                    stop: function(e, a) {},
                                    create: function(e, a) {
                                        t.find(".label_" + l).html(r.label + '<span class="epl-lf-label-txt"> ' + r.prefix + i[0].formatMoney(0) + r.suffix + r.separator + r.prefix + i[1].formatMoney(0) + r.suffix + "</span>")
                                    }
                                })
                            })
                        }
                })
            })
        },
        epl_search: function() {
            c(".epl-search-form form").on("submit", function(e) {
                e.preventDefault();
                var a = c(this).serialize().split("&"),
                    t = [];
                for (i in a) "string" == typeof a[i] && a[i].split("=")[1] && t.push(a[i]);
                var l = t.join("&"),
                    r = epl_frontend_vars.site_url + "?" + l;
                location.href = r
            })
        },
        contact_form_submit: function() {
            c(".epl-contact-capture-form form").on("submit", function(e) {
                var a = c(this);
                e.preventDefault();
                var t = c(this).serializeArray();
                t.push({
                    name: "action",
                    value: "epl_contact_capture_action"
                }), c.ajax({
                    type: "POST",
                    url: epl_frontend_vars.ajaxurl,
                    data: t,
                    dataType: "json"
                }).done(function(e) {
                    c(".epl-contact-widget-msgs").remove(), a.after('<div class="epl-contact-widget-msgs epl-contact-widget-msg-' + e.status + '">' + e.msg + "</div>"), "success" == e.status && a.trigger("reset")
                })
            })
        }
    }, EPL_Front_Js.init()
}), jQuery.extend({
    getUrlVars: function() {
        return EPL_Front_Js.get_url_vars()
    },
    getUrlVar: function(e) {
        return EPL_Front_Js.get_url_var(e)
    }
});